"""import ast

def fetch_director(text):
    L = []
    for i in ast.literal_eval(text):
        if i.get('job') == 'Director':
            L.append(i['name'])
    return L

# Example usage:
raw_data = '[{"credit_id": "52fe48009251416c750acaaf", "department": "Directing", "gender": 2, "id": 2710, "job": "Director", "name": "James Cameron"}, {"credit_id": "52fe48009251416c750acaaf", "department": "Directing", "gender": 2, "id": 2711, "job": "Assistant Director", "name": "John Doe"}]'

directors = fetch_director(raw_data)


"""

"""

Table: Seat

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| id          | int     |
| student     | varchar |
+-------------+---------+
id is the primary key (unique value) column for this table.
Each row of this table indicates the name and the ID of a student.
id is a continuous increment.
 

Write a solution to swap the seat id of every two consecutive students. If the number of students is odd, the id of the last student is not swapped.

Return the result table ordered by id in ascending order.

The result format is in the following example.

 

Example 1:

Input: 
Seat table:
+----+---------+
| id | student |
+----+---------+
| 1  | Abbot   |
| 2  | Doris   |
| 3  | Emerson |
| 4  | Green   |
| 5  | Jeames  |
+----+---------+
Output: 
+----+---------+
| id | student |
+----+---------+
| 1  | Doris   |
| 2  | Abbot   |
| 3  | Green   |
| 4  | Emerson |
| 5  | Jeames  |
+----+---------+
Explanation: 
Note that if the number of students is odd, there is no need to change the last one's seat.


"""

select 
case 
    when id = (select max(id) from seat) and mod(id,2) = 1 then id
    when mod(id,2) = 1 then id+1
else 
    id - 1 
end as id, student 

from seat
order by id



Table: Movies

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| movie_id      | int     |
| title         | varchar |
+---------------+---------+
movie_id is the primary key (column with unique values) for this table.
title is the name of the movie.
 

Table: Users

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| user_id       | int     |
| name          | varchar |
+---------------+---------+
user_id is the primary key (column with unique values) for this table.
 

Table: MovieRating

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| movie_id      | int     |
| user_id       | int     |
| rating        | int     |
| created_at    | date    |
+---------------+---------+
(movie_id, user_id) is the primary key (column with unique values) for this table.
This table contains the rating of a movie by a user in their review.
created_at is the user's review date. 
 

Write a solution to:

Find the name of the user who has rated the greatest number of movies. In case of a tie, return the lexicographically smaller user name.
Find the movie name with the highest average rating in February 2020. In case of a tie, return the lexicographically smaller movie name.
The result format is in the following example.

 

Example 1:

Input: 
Movies table:
+-------------+--------------+
| movie_id    |  title       |
+-------------+--------------+
| 1           | Avengers     |
| 2           | Frozen 2     |
| 3           | Joker        |
+-------------+--------------+
Users table:
+-------------+--------------+
| user_id     |  name        |
+-------------+--------------+
| 1           | Daniel       |
| 2           | Monica       |
| 3           | Maria        |
| 4           | James        |
+-------------+--------------+
MovieRating table:
+-------------+--------------+--------------+-------------+
| movie_id    | user_id      | rating       | created_at  |
+-------------+--------------+--------------+-------------+
| 1           | 1            | 3            | 2020-01-12  |
| 1           | 2            | 4            | 2020-02-11  |
| 1           | 3            | 2            | 2020-02-12  |
| 1           | 4            | 1            | 2020-01-01  |
| 2           | 1            | 5            | 2020-02-17  | 
| 2           | 2            | 2            | 2020-02-01  | 
| 2           | 3            | 2            | 2020-03-01  |
| 3           | 1            | 3            | 2020-02-22  | 
| 3           | 2            | 4            | 2020-02-25  | 
+-------------+--------------+--------------+-------------+
Output: 
+--------------+
| results      |
+--------------+
| Daniel       |
| Frozen 2     |
+--------------+
Explanation: 
Daniel and Monica have rated 3 movies ("Avengers", "Frozen 2" and "Joker") but Daniel is smaller lexicographically.
Frozen 2 and Joker have a rating average of 3.5 in February but Frozen 2 is smaller lexicographically.


solution

# Write your MySQL 
(select name as results from 
(select name,count(u.name) as counting
from 
Movies m  left join MovieRating mr on m.movie_id = mr.movie_id 
left join Users u on mr.user_id = u.user_id
group by u.name
order by u.name
 ) as table1

where counting =( select max(counting) from
(select name,count(u.name) as counting
from 
Movies m  left join MovieRating mr on m.movie_id = mr.movie_id 
left join Users u on mr.user_id = u.user_id
group by u.name) as table2) limit 1
)
union all

(select title as results from
(select 
m.title , avg(mr.rating) AS rate
from 
Movies m  left join MovieRating mr on m.movie_id = mr.movie_id 
left join Users u on mr.user_id = u.user_id
where mr.created_at between '2020-02-01' and '2020-02-28'
group by m.title 
order by m.title) as table1

where rate = (select max(rate) from 
(select 
m.title , avg(mr.rating) AS rate
from 
Movies m  left join MovieRating mr on m.movie_id = mr.movie_id 
left join Users u on mr.user_id = u.user_id
where mr.created_at between '2020-02-01' and '2020-02-28'
group by m.title ) as table2

)
limit 1
)